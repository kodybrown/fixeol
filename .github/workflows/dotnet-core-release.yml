name: dotnet-core-release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet: [ '2.2.x', '3.0', '3.1.x' ]
    name: Dotnet ${{ matrix.dotnet }}
    steps:
      - name: Get the source
        uses: actions/checkout@master

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.4.0
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-restore --verbosity normal

      - name: Publish
        run: dotnet publish --no-restore --configuration Release

      - name: Create zip file
        run: |
          zip --junk-paths ./fixeol-${{ github.ref }}.zip ./bin/Release/netcoreapp${{ matrix.dotnet }}/publish/*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./fixeol-${{ github.ref }}.zip
          asset_name: fixeol-${{ github.ref }}.zip
          asset_content_type: application/zip
